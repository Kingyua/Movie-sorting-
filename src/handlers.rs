use actix_web::{web, HttpResponse, Responder};
use uuid::Uuid;
use crate::models::Movie;
use crate::state::AppState;

// Add a new movie
pub async fn add_movie(data: web::Data<AppState>, movie: web::Json<Movie>) -> impl Responder {
  let mut movies = data.movies.lock().unwrap();
  let new_movie = Movie {
      id: Some(Uuid::new_v4()), // Wrap the UUID in Some()
      title: movie.title.clone(),
      watched: movie.watched,
  };
  movies.push(new_movie.clone());
  HttpResponse::Created().json(new_movie)
}

// Get all movies
pub async fn get_movies(data: web::Data<AppState>) -> impl Responder {
    let movies = data.movies.lock().unwrap();
    HttpResponse::Ok().json(movies.clone())
}

// Mark a movie as watched
pub async fn mark_watched(data: web::Data<AppState>, movie_id: web::Path<Uuid>) -> impl Responder {
  let mut movies = data.movies.lock().unwrap();
  if let Some(movie) = movies.iter_mut().find(|m| m.id.as_ref() == Some(&movie_id.clone())) {
      movie.watched = true;
      return HttpResponse::Ok().json(movie.clone());
  }
  HttpResponse::NotFound().body("Movie not found")
}

// Delete a movie
pub async fn delete_movie(data: web::Data<AppState>, movie_id: web::Path<Uuid>) -> impl Responder {
  let mut movies = data.movies.lock().unwrap();
  if movies.iter().any(|m| m.id.as_ref() == Some(&movie_id.clone())) {
      movies.retain(|m| m.id.as_ref() != Some(&movie_id.clone()));
      return HttpResponse::NoContent().finish();
  }
  HttpResponse::NotFound().body("Movie not found")
}

#[cfg(test)]
mod tests {
    use super::*;
    use actix_web::{test, App};
    use uuid::Uuid;

    #[actix_rt::test]
    async fn test_add_movie() {
        let app_state = AppState {
            movies: std::sync::Mutex::new(vec![]),
        };
        
        let mut app = test::init_service(
            App::new()
                .app_data(web::Data::new(app_state))
                .route("/movies", web::post().to(add_movie)),
        ).await;

        let new_movie = Movie {
            id: None, // ID should be None; it's generated by the server
            title: "Test Movie".to_string(),
            watched: false,
        };

        let req = test::TestRequest::post()
            .uri("/movies")
            .set_json(&new_movie)
            .to_request();

        let resp: Movie = test::call_and_read_body_json(&mut app, req).await;
        assert_eq!(resp.title, "Test Movie");
        // Check if `id` is generated
        assert!(resp.id.is_some()); // Verify that the ID is present
        assert_ne!(resp.id.unwrap(), Uuid::nil()); // Verify that the ID is not a nil UUID
    }
}

